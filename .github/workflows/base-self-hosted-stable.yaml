################################################################################
## ShamanOps Base Pipeline | Github Actions | Self-hosted runner Stable ########
################################################################################
##
name: shamanops-base-pipeline-stable-self-hosted
on:
  workflow_call:
    inputs:
      # Project
      projectName:
        type: string
        default: 'default'
      # Environments: full-with-drp (dev/stg/prod/drp) | full (dev/stg/prod) | mid (stg/prod) | minimal (prod)
      environments:
        type: string
        default: 'full'
      # Deployment strategy
      strategyCanaryProd:
        type: string
        default: 'false'
      strategyCanaryStg:
        type: string
        default: 'false'
      strategyCanaryDev:
        type: string
        default: 'false'
      strategyBlueGreenProd:
        type: string
        default: 'false'
      strategyBlueGreenStg:
        type: string
        default: 'false'
      strategyBlueGreenDev:
        type: string
        default: 'false'
      # Approvals
      approvals_timeout:
        type: string
        default: '30'
      # GitHub Actions - Actions Runner Controller 
      approvals_runner:
        type: string
        default: 'ubuntu-latest'
      shamanopsBusinessApprovers:
        type: string
        default: ''
      shamanopsTechnicalApprovers:
        type: string
        default: ''
      shamanopsApprovalsDev:
        type: string
        default: 'false'
      shamanopsBusinessApproversMinimalDev:
        type: string
        default: '0'
      shamanopsTechnicalApproversMinimalDev:
        type: string
        default: '0'
      shamanopsApprovalsStg:
        type: string
        default: 'false'
      shamanopsBusinessApproversMinimalStg:
        type: string
        default: '0'
      shamanopsTechnicalApproversMinimalStg:
        type: string
        default: '0'
      shamanopsApprovalsProd:
        type: string
        default: 'true'
      shamanopsBusinessApproversMinimalProd:
        type: string
        default: '1'
      shamanopsTechnicalApproversMinimalProd:
        type: string
        default: '1'
      # Code language Auto-detection
      code_language_detection_enabled:
        type: string
        default: 'false'
      # SAST check | Sonarqube
      code_quality_check_enabled:
        type: string
        default: 'false'
      code_quality_check_blocker:
        type: string
        default: 'false'
      code_quality_check_exclusions: 
        type: string
        default: 'test/**'
      code_quality_check_test_exclusions:
        type: string
        default: '**/vendor/**' 
      code_quality_check_test_inclusions:
        type: string
        default: '**/*test*'
      code_quality_check_cs_dir:
        type: string
        default: ''
      code_quality_check_cs_nuget_enabled:
        type: string
        default: 'false'
      code_quality_check_cs_nuget_dir:
        type: string
        default: '/nuget'
      code_quality_check_cs_nuget_config:
        type: string
        default: 'NuGet.Config'
      code_quality_check_test_cs_enabled:
        type: string
        default: 'false'
      code_quality_check_test_cs_opencover_reportsPaths:
        type: string
        default: 'tests/**/coverage.opencover.xml'
      # Stress tests | JMeter
      stress_check_enabled:
        type: string
        default: 'false'
      stress_check_blocker:
        type: string
        default: 'false'
      stress_check_error_rate_max:
        type: string
        default: '15'
      stress_check_thread:
        type: string
        default: '19'
      stress_check_upPeriod:
        type: string
        default: '10'
      stress_check_second:
        type: string
        default: '60'
      # Dependency and OS security checker
      security_check_enabled:
        type: string
        default: 'true'
      security_check_blocker:
        type: string
        default: 'false'
      security_check_report_upload:
        type: string
        default: 'false'
      security_check_report_format:
        type: string
        default: 'table'
      # Software Bill of Materials
      sbom_check_enabled:
        type: string
        default: 'false'
      sbom_check_report_upload:
        type: string
        default: 'false'
      sbom_check_report_format:
        type: string
        default: 'table'
      # Database Versioning
      db_versioning_enabled:
        type: string
        default: 'false'
      db_versioning_type:
        type: string
        default: 'postgresql'
      db_versioning_changelog_file:
        type: string
        default: 'db.changelog.xml'
      # Functional Analysis
      functional_analysis_enabled:
        type: string
        default: 'false'
      functional_analysis_blocker:
        type: string
        default: 'false'
      functional_analysis_test_type:
        type: string
        default: 'playwright'
      functional_analysis_test_storage_enabled:
        type: string
        default: 'false'
      functional_analysis_test_storage_class:
        type: string
        default: 'default'
      functional_analysis_test_path:
        type: string
        default: 'testing'
      functional_analysis_test_timeout:
        type: string
        default: '600'
      # Verbosity level
      log_level:
        type: string
        default: 'normal'
      # Application port
      appInternalPort:
        type: string
        default: ''
      # GIT Submodules
      git_submodules_enabled:
        type: string
        default: 'false'
      # Dynamic Envs
      shamanopsDynamicEnvsEnabled:
        type: string
        default: 'false'
      shamanopsDynamicEnvs:
        type: string
        default: 'qa'
      shamanopsTechnicalApproversMinimalDynamicEnvs:
        type: string
        default: '1'
      shamanopsBusinessApproversMinimalDynamicEnvs:
        type: string
        default: '1'
      shamanopsApprovalsDynamicEnvs:
        type: string
        default: 'false'
    # Secrets
    secrets:
      shamanops_customer_token:
        required: true
      shamanops_argocd_dev_token:
      shamanops_argocd_stg_token:
      shamanops_argocd_dynenv_token:
      shamanops_argocd_prod_token:
        required: true
      shamanops_argocd_drp_token:
      shamanops_code_quality_token:
      shamanops_manifest_repository_token:
        required: true
      shamanops_chat_webhook:
      shamanops_registry_password:
        required: true
      shamanops_dockerfile_token:
      shamanops_testing_git_token:
      shamanops_submodules_token:
      # For AWS credentials
      AWS_ACCESS_KEY_ID:
      AWS_SECRET_ACCESS_KEY:
      AWS_REGION:
env:
# Client side
  environments: ${{inputs.environments}}
  projectName: ${{inputs.projectName}}
  approvals_timeout: ${{inputs.approvals_timeout}}
  approvals_runner: ${{inputs.approvals_runner}}
  strategyCanaryProd: ${{inputs.strategyCanaryProd}}
  strategyCanaryStg: ${{inputs.strategyCanaryStg}}
  strategyCanaryDev: ${{inputs.strategyCanaryDev}}
  strategyBlueGreenProd: ${{inputs.strategyBlueGreenProd}}
  strategyBlueGreenStg: ${{inputs.strategyBlueGreenStg}}
  strategyBlueGreenDev: ${{inputs.strategyBlueGreenDev}}
  code_language_detection_enabled: ${{inputs.code_language_detection_enabled}}
  code_quality_check_enabled: ${{inputs.code_quality_check_enabled}}
  code_quality_check_blocker: ${{inputs.code_quality_check_blocker}}
  code_quality_check_exclusions: ${{inputs.code_quality_check_exlusions}}
  code_quality_check_test_exclusions: ${{inputs.code_quality_check_test_exlusions}}
  code_quality_check_test_inclusions: ${{inputs.code_quality_check_test_inclusions}}
  code_quality_check_cs_dir: ${{inputs.code_quality_check_cs_dir}}
  code_quality_check_cs_nuget_enabled: ${{inputs.code_quality_check_cs_nuget_enabled}}
  code_quality_check_cs_nuget_dir: ${{inputs.code_quality_check_cs_nuget_dir}}
  code_quality_check_cs_nuget_config: ${{inputs.code_quality_check_cs_nuget_config}}
  code_quality_check_test_cs_enabled: ${{inputs.code_quality_check_test_cs_enabled}}
  code_quality_check_test_cs_opencover_reportsPaths: ${{inputs.code_quality_check_test_cs_opencover_reportsPaths}}
  stress_check_enabled: ${{inputs.stress_check_enabled}}
  stress_check_blocker: ${{inputs.stress_check_blocker}}
  stress_check_error_rate_max: ${{inputs.stress_check_error_rate_max}}
  stress_check_thread: ${{inputs.stress_check_thread}}
  stress_check_upPeriod: ${{inputs.stress_check_upPeriod}}
  stress_check_second: ${{inputs.stress_check_second}}
  security_check_enabled: ${{inputs.security_check_enabled}}
  security_check_blocker: ${{inputs.security_check_blocker}}
  security_check_report_upload: ${{inputs.security_check_report_upload}}
  security_check_report_format: ${{inputs.security_check_report_format}}
  sbom_check_enabled: ${{inputs.sbom_check_enabled}}
  sbom_check_report_upload: ${{inputs.sbom_check_report_upload}}
  sbom_check_report_format: ${{inputs.sbom_check_report_format}}
  db_versioning_enabled: ${{inputs.db_versioning_enabled}}
  db_versioning_type: ${{inputs.db_versioning_type}}
  db_versioning_changelog_file: ${{inputs.db_versioning_changelog_file}}
  functional_analysis_enabled: ${{inputs.functional_analysis_enabled}}
  functional_analysis_blocker: ${{inputs.functional_analysis_blocker}}
  functional_analysis_test_type: ${{inputs.functional_analysis_test_type}}
  functional_analysis_test_storage_enabled: ${{inputs.functional_analysis_test_storage_enabled}}
  functional_analysis_test_storage_class: ${{inputs.functional_analysis_test_storage_class}}
  functional_analysis_test_path: ${{inputs.functional_analysis_test_path}}
  functional_analysis_test_timeout: ${{inputs.functional_analysis_test_timeout}}
  log_level: ${{inputs.log_level}}
  appInternalPort: ${{inputs.appInternalPort}}
  git_submodules_enabled: ${{inputs.git_submodules_enabled}}
  shamanopsBusinessApprovers: ${{inputs.shamanopsBusinessApprovers}}
  shamanopsTechnicalApprovers: ${{inputs.shamanopsTechnicalApprovers}}
  shamanopsApprovalsDev: ${{inputs.shamanopsApprovalsDev}}
  shamanopsBusinessApproversMinimalDev: ${{inputs.shamanopsBusinessApproversMinimalDev}}
  shamanopsTechnicalApproversMinimalDev: ${{inputs.shamanopsTechnicalApproversMinimalDev}}
  shamanopsApprovalsStg: ${{inputs.shamanopsApprovalsStg}}
  shamanopsBusinessApproversMinimalStg: ${{inputs.shamanopsBusinessApproversMinimalStg}}
  shamanopsTechnicalApproversMinimalStg: ${{inputs.shamanopsTechnicalApproversMinimalStg}}
  shamanopsApprovalsProd: ${{inputs.shamanopsApprovalsProd}}
  shamanopsBusinessApproversMinimalProd: ${{inputs.shamanopsBusinessApproversMinimalProd}}
  shamanopsTechnicalApproversMinimalProd: ${{inputs.shamanopsTechnicalApproversMinimalProd}}
  shamanopsDynamicEnvsEnabled: ${{inputs.shamanopsDynamicEnvsEnabled}}
  shamanopsDynamicEnvs: ${{inputs.shamanopsDynamicEnvs}}
  shamanopsTechnicalApproversMinimalDynamicEnvs: ${{inputs.shamanopsTechnicalApproversMinimalDynamicEnvs}}
  shamanopsBusinessApproversMinimalDynamicEnvs: ${{inputs.shamanopsBusinessApproversMinimalDynamicEnvs}}
  shamanopsApprovalsDynamicEnvs: ${{inputs.shamanopsApprovalsDynamicEnvs}}
# Global side
  shamanops_argocd_dev_url: ${{vars.shamanops_argocd_dev_url}}
  shamanops_argocd_dev_user: ${{vars.shamanops_argocd_dev_user}}
  shamanops_argocd_dev_token: ${{secrets.shamanops_argocd_dev_token}}
  shamanops_argocd_stg_url: ${{vars.shamanops_argocd_stg_url}}
  shamanops_argocd_stg_user: ${{vars.shamanops_argocd_stg_user}}
  shamanops_argocd_stg_token: ${{secrets.shamanops_argocd_stg_token}}
  shamanops_argocd_dynenv_url: ${{vars.shamanops_argocd_dynenv_url}}
  shamanops_argocd_dynenv_user: ${{vars.shamanops_argocd_dynenv_user}}
  shamanops_argocd_dynenv_token: ${{secrets.shamanops_argocd_dynenv_token}}
  shamanops_argocd_prod_url: ${{vars.shamanops_argocd_prod_url}}
  shamanops_argocd_prod_user: ${{vars.shamanops_argocd_prod_user}}
  shamanops_argocd_prod_token: ${{secrets.shamanops_argocd_prod_token}}
  shamanops_argocd_drp_url: ${{vars.shamanops_argocd_drp_url}}
  shamanops_argocd_drp_user: ${{vars.shamanops_argocd_drp_user}}
  shamanops_argocd_drp_token: ${{secrets.shamanops_argocd_drp_token}}
  shamanops_chat_webhook: ${{secrets.shamanops_chat_webhook}}
  shamanops_manifest_repository: ${{vars.shamanops_manifest_repository}}
  shamanops_manifest_repository_user: ${{vars.shamanops_manifest_repository_user}}
  shamanops_manifest_repository_token: ${{secrets.shamanops_manifest_repository_token}}
  shamanops_registry_url: ${{vars.shamanops_registry_url}}
  shamanops_registry_user: ${{vars.shamanops_registry_user}}
  shamanops_registry_password: ${{secrets.shamanops_registry_password}}
  shamanops_customer_id: ${{vars.shamanops_customer_id}}
  shamanops_customer_token: ${{secrets.shamanops_customer_token}}
  shamanops_code_quality_url: ${{vars.shamanops_code_quality_url}}
  shamanops_code_quality_token: ${{secrets.shamanops_code_quality_token}}
  shamanops_dockerfile_token: ${{secrets.shamanops_dockerfile_token}}
  shamanops_testing_git_user: ${{vars.shamanops_testing_git_user}}
  shamanops_testing_git_token: ${{secrets.shamanops_testing_git_token}}
  shamanops_testing_api_url: ${{vars.shamanops_testing_api_url}}
  shamanops_submodules_token: ${{secrets.shamanops_submodules_token}}
  #shamanops_testing_api_token: ${{secrets.shamanops_testing_api_token}}
  # For AWS credentials
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_REGION: ${{secrets.AWS_REGION}}
# For CI Platform:
  # Global variables
  customerName: ${{github.repository_owner}}
  appName: ${{github.event.repository.name}}
  repoUrl: ${{github.server_url}}/${{github.repository}}
  jobUrl: ${{ github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}
  var2: ${CI_REGISTRY_IMAGE%/*}
  pipelineId: ${{github.run_id}}
  ##############################################################################
jobs:
################################################################################
# Stages
# ------------------------------------------------------------------------------
# Stage 1 - Requirements #######################################################
  repository-check:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: repository-check
        run: shamanops repository-check
# Stage 2 - Build ##############################################################
  image-build-and-push:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [repository-check]
    if: ${{ always() && !cancelled() && !failure() }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: image-build-and-push
        run: shamanops image-build
  image-check:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [repository-check, image-build-and-push]
    if: ${{ always() && !cancelled() && !failure() }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: image-check
        run: shamanops image-check
# Stage 3 - Analysis ##############################################################
  sast-check:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check]
    if: ${{ always() && !cancelled() && !failure() &&
          inputs.code_quality_check_enabled == 'true'
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: sast-check
        run: shamanops sast-check
  security-check:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check]
    if: ${{ always() && !cancelled() && !failure() &&
          inputs.security_check_enabled == 'true'
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: security-check
        run: shamanops security-check
# Stage 5 - Deploy - DEV environment #############################################
  approvals-dev:
    runs-on: ${{ inputs.approvals_runner }}
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check]
    if: ${{ always() && !cancelled() && 
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (inputs.environments != 'minimal' && inputs.environments != 'mid' && inputs.shamanopsApprovalsDev == 'true')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name:  approvals-dev
        run: shamanops approvals dev
  db-versioning-dev:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev]
    if: ${{ always() && !cancelled() &&
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (inputs.environments != 'minimal' && inputs.environments != 'mid' && needs.approvals-dev.result != 'failure' && inputs.db_versioning_enabled == 'true')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name:  db-versioning-dev
        run: shamanops db-versioning dev
  app-create-and-deploy-dev:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev, db-versioning-dev]
    if: ${{ always() && !cancelled() && 
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (inputs.environments != 'minimal' && inputs.environments != 'mid' && needs.approvals-dev.result != 'failure' && needs.db-versioning-dev.result != 'failure')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: app-create-and-deploy-dev
        run: shamanops app-create-and-deploy dev
# Deploy - DYNAMIC environment #############################################
  app-create-and-deploy-dynamic-envs:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev, db-versioning-dev, app-create-and-deploy-dev]
    if: ${{ always() && !cancelled() &&
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (inputs.environments != 'minimal' && inputs.shamanopsDynamicEnvsEnabled == 'true' && needs.approvals-dev.result != 'failure' && needs.db-versioning-dev.result != 'failure' && needs.app-create-and-deploy-dev != 'failure')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0
      - name: app-create-and-deploy-dynamic-envs
        run: shamanops dynamic-envs
# Stage 5 - Deploy - STG environment #############################################
  approvals-stg:
    runs-on: ${{ inputs.approvals_runner }}
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev, db-versioning-dev, app-create-and-deploy-dev, app-create-and-deploy-dynamic-envs]
    if: ${{ always() && !cancelled() && 
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (inputs.environments != 'minimal' && inputs.shamanopsApprovalsStg == 'true' && needs.approvals-dev.result != 'failure' && needs.db-versioning-dev.result != 'failure' && needs.app-create-and-deploy-dev.result != 'failure' && needs.app-create-and-deploy-dynamic-envs.result != 'failure')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: approvals-stg
        run: shamanops approvals stg
  db-versioning-stg:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev, db-versioning-dev, app-create-and-deploy-dev, app-create-and-deploy-dynamic-envs, approvals-stg]
    if: ${{ always() && !cancelled() &&
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (inputs.environments != 'minimal' && inputs.db_versioning_enabled == 'true' && needs.approvals-dev.result != 'failure' && needs.db-versioning-dev.result != 'failure' && needs.app-create-and-deploy-dev.result != 'failure' && needs.app-create-and-deploy-dynamic-envs.result != 'failure' && needs.approvals-stg.result != 'failure')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name:  db-versioning-stg
        run: shamanops db-versioning stg
  app-create-and-deploy-stg:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev, db-versioning-dev, app-create-and-deploy-dev, app-create-and-deploy-dynamic-envs, approvals-stg, db-versioning-stg]
    if: ${{ always() && !cancelled() && 
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (inputs.environments != 'minimal' && needs.approvals-dev.result != 'failure' && needs.db-versioning-dev.result != 'failure' && needs.app-create-and-deploy-dev.result != 'failure' && needs.app-create-and-deploy-dynamic-envs.result != 'failure' && needs.approvals-stg.result != 'failure' && needs.db-versioning-stg.result != 'failure')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: app-create-and-deploy-stg
        run: shamanops app-create-and-deploy stg
# Stage 5 - Stress Test ##########################################################
  functional-check:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev, db-versioning-dev, app-create-and-deploy-dev, app-create-and-deploy-dynamic-envs, approvals-stg, db-versioning-stg, app-create-and-deploy-stg]
    if: ${{ always() && !cancelled() && 
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (inputs.functional_analysis_enabled == 'true' && inputs.environments != 'minimal' && needs.approvals-dev.result != 'failure' && needs.db-versioning-dev.result != 'failure' && needs.app-create-and-deploy-dev.result != 'failure' && needs.app-create-and-deploy-dynamic-envs.result != 'failure' && needs.approvals-stg.result != 'failure' && needs.db-versioning-stg.result != 'failure' && needs.app-create-and-deploy-stg.result != 'failure')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: functional-check
        run: shamanops functional-check
  stress-check:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev, db-versioning-dev, app-create-and-deploy-dev, app-create-and-deploy-dynamic-envs, approvals-stg, db-versioning-stg, app-create-and-deploy-stg, functional-check]
    if: ${{ always() && !cancelled() &&
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.functional_analysis_blocker != 'true')) &&
          (inputs.stress_check_enabled == 'true' && inputs.environments != 'minimal' && needs.approvals-dev.result != 'failure' && needs.db-versioning-dev.result != 'failure' && needs.app-create-and-deploy-dev.result != 'failure' && needs.app-create-and-deploy-dynamic-envs.result != 'failure' && needs.approvals-stg.result != 'failure' && needs.db-versioning-stg.result != 'failure' && needs.app-create-and-deploy-stg.result != 'failure')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: stress-check
        run: shamanops stress-check
# Stage 5 - Deploy - PROD environment ############################################# 
  approvals-prod:
    runs-on: ${{ inputs.approvals_runner }}
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev, db-versioning-dev, app-create-and-deploy-dev, app-create-and-deploy-dynamic-envs, approvals-stg, db-versioning-stg, app-create-and-deploy-stg, functional-check, stress-check]
    if: ${{ always() && !cancelled() && 
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.functional_analysis_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.stress_check_blocker != 'true')) &&
          (inputs.shamanopsApprovalsProd == 'true' && inputs.environments != 'pre' && needs.approvals-dev.result != 'failure' && needs.db-versioning-dev.result != 'failure' && needs.app-create-and-deploy-dev.result != 'failure' && needs.app-create-and-deploy-dynamic-envs.result != 'failure' && needs.approvals-stg.result != 'failure' && needs.db-versioning-stg.result != 'failure' && needs.app-create-and-deploy-stg.result != 'failure')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name:  approvals-prod
        run: shamanops approvals prod
  db-versioning-prod:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev, db-versioning-dev, app-create-and-deploy-dev, app-create-and-deploy-dynamic-envs, approvals-stg, db-versioning-stg, app-create-and-deploy-stg, functional-check, stress-check, approvals-prod]
    if: ${{ always() && !cancelled() &&
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.functional_analysis_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.stress_check_blocker != 'true')) &&
          (inputs.db_versioning_enabled == 'true' && inputs.environments != 'pre' && needs.approvals-dev.result != 'failure' && needs.db-versioning-dev.result != 'failure' && needs.app-create-and-deploy-dev.result != 'failure' && needs.app-create-and-deploy-dynamic-envs.result != 'failure' && needs.approvals-stg.result != 'failure' && needs.db-versioning-stg.result != 'failure' && needs.app-create-and-deploy-stg.result != 'failure' && needs.approvals-prod.result != 'failure')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: db-versioning-prod
        run: shamanops db-versioning prod
  app-create-and-deploy-prod:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev, db-versioning-dev, app-create-and-deploy-dev, app-create-and-deploy-dynamic-envs, approvals-stg, db-versioning-stg, app-create-and-deploy-stg, functional-check, stress-check, approvals-prod, db-versioning-prod]
    if: ${{ always() && !cancelled() && 
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.functional_analysis_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.stress_check_blocker != 'true')) &&
          (needs.approvals-dev.result != 'failure' && inputs.environments != 'pre' && needs.db-versioning-dev.result != 'failure' && needs.app-create-and-deploy-dev.result != 'failure' && needs.app-create-and-deploy-dynamic-envs.result != 'failure' && needs.approvals-stg.result != 'failure' && needs.db-versioning-stg.result != 'failure' && needs.app-create-and-deploy-stg.result != 'failure' && needs.approvals-prod.result != 'failure' && needs.db-versioning-prod.result != 'failure')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: app-create-and-deploy-prod
        run: shamanops app-create-and-deploy prod
# Stage 5 - Deploy - DRP environment #############################################
  app-create-and-deploy-drp:
    runs-on: self-hosted
    container:
      image: registry.shamanops.com/runner/fedora:stable
      options: -u root --privileged --quiet
      credentials:
        username: ${{env.shamanops_customer_id}}
        password: ${{env.shamanops_customer_token}}
    needs: [image-build-and-push, image-check, sast-check, security-check, approvals-dev, db-versioning-dev, app-create-and-deploy-dev, app-create-and-deploy-dynamic-envs, approvals-stg, db-versioning-stg, app-create-and-deploy-stg, functional-check, stress-check, approvals-prod, db-versioning-prod, app-create-and-deploy-prod]
    if: ${{ always() && !cancelled() && 
          (!failure() || (needs.image-check.result == 'success' && inputs.code_quality_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.security_check_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.functional_analysis_blocker != 'true')) &&
          (!failure() || (needs.image-check.result == 'success' && inputs.stress_check_blocker != 'true')) &&
          (inputs.environments == 'full-with-drp' && inputs.environments != 'pre' && needs.approvals-dev.result != 'failure' && needs.db-versioning-dev.result != 'failure' && needs.app-create-and-deploy-dev.result != 'failure' && needs.app-create-and-deploy-dynamic-envs.result != 'failure' && needs.approvals-stg.result != 'failure' && needs.db-versioning-stg.result != 'failure' && needs.app-create-and-deploy-stg.result != 'failure' && needs.approvals-prod.result != 'failure' && needs.db-versioning-prod.result != 'failure' && needs.app-create-and-deploy-prod.result != 'failure')
        }}
    steps:
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled != 'true'
        with:
          fetch-depth: 0
        name: checkout-repository-normal
      - uses: actions/checkout@v4.1.1
        if: inputs.git_submodules_enabled == 'true'
        with:
          token: ${{ env.shamanops_submodules_token }}
          submodules: recursive
          fetch-depth: 0
        name: checkout-repository-with-submodules
      - name: app-create-and-deploy-drp
        run: shamanops app-create-and-deploy drp
